AWSTemplateFormatVersion: '2010-09-09'
Description: Instance template
Transform: AWS::Serverless-2016-10-31
Parameters:
  vpcId:
    Type: String
  availabilityZones:
    Type: List<String>
  subnetIds:
    Type: List<String>
  ingressCidr:
    Type: String
  imageId:
    Type: String
  instanceType:
    Type: String
  volumeSize:
    Type: Number
  key:
    Type: String
Resources:
  # Security Groups
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for instance
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ingressCidr
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref ingressCidr
  # Instance
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
        - PolicyName: cloudformation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:ListStacks
                Resource: !Sub 'arn:aws:cloudformation:*:${AWS::AccountId}:stack/*/*'
  Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
  Volume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select ["0", !Ref availabilityZones]
      Encrypted: false
      Size: !Ref volumeSize
      Tags:
        - Key: application:group
          Value: templates
        - Key: application:subgroup
          Value: ec2
        - Key: application:owner
          Value: heeki
  VolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref Instance
      VolumeId: !Ref Volume
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      EbsOptimized: true
      IamInstanceProfile: !Ref Profile
      ImageId: !Ref imageId
      InstanceType: !Ref instanceType
      KeyName: !Ref key
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Select ["0", !Ref subnetIds]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install jq -y
          mkdir /mnt/volume
          mkfs -t xfs /dev/xvdf
          lsblk -f
          mount /dev/sdf /mnt/volume
          chown ec2-user:ec2-user /mnt/volume
          echo "/dev/sdf /mnt/volume xfs defaults 0 2" >> /etc/fstab
          mount -a
      Tags:
        - Key: application:group
          Value: templates
        - Key: application:subgroup
          Value: ec2
        - Key: application:owner
          Value: heeki
Outputs:
  outPublicDnsName:
    Value: !GetAtt Instance.PublicDnsName
  outPublicIp:
    Value: !GetAtt Instance.PublicIp
  outSecurityGroup:
    Value: !Ref SecurityGroup